package main

import (
	"fmt"
	"time"
)

func fibonacci(n int, ch chan<- int) {
	a, b := 0, 1
	for i := 0; i < n; i++ {
		ch <- a
		a, b = b, a+b
	}
	close(ch) // закрывание канала после отправки всех чисел
}

func read(ch <-chan int) {
	for num := range ch {
		fmt.Print(num, " ")
	}
}

func main() {

	/*
			2.	Использование каналов для передачи данных:
		•	Реализуйте приложение, в котором одна горутина генерирует последовательность чисел (например, первые 10 чисел Фибоначчи) и отправляет их в канал.
		•	Другая горутина должна считывать данные из канала и выводить их на экран.
		•	Добавьте блокировку чтения из канала с помощью close() и объясните её роль.
	*/

	// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711

	ch := make(chan int) // создание канала

	go fibonacci(10, ch) // запуск горутины для генерации чисел фибоначчи

	go read(ch) // запуск гоурутины для чтения чисел из канала

	time.Sleep(1 * time.Second)
}
